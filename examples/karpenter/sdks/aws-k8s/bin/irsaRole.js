"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IrsaRole = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * IrsaRole creates an IAM role that can be assumed by Kubernetes service accounts (IRSA).
 * It automatically configures the trust relationship between the IAM role and the EKS cluster's OIDC provider.
 *
 * The role can be assumed by one or more Kubernetes service accounts specified in the args.
 * The trust relationship is configured to only allow the specified service accounts to assume the role.
 */
class IrsaRole extends pulumi.ComponentResource {
    /**
     * Returns true if the given object is an instance of IrsaRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IrsaRole.__pulumiType;
    }
    /**
     * Create a IrsaRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceDetachPolicies"] = args ? args.forceDetachPolicies : undefined;
            resourceInputs["inlinePolicies"] = args ? args.inlinePolicies : undefined;
            resourceInputs["managedPolicyArns"] = args ? args.managedPolicyArns : undefined;
            resourceInputs["maxSessionDuration"] = args ? args.maxSessionDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissionsBoundary"] = args ? args.permissionsBoundary : undefined;
            resourceInputs["serviceAccounts"] = args ? args.serviceAccounts : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["roleName"] = undefined /*out*/;
        }
        else {
            resourceInputs["roleName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IrsaRole.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}
exports.IrsaRole = IrsaRole;
/** @internal */
IrsaRole.__pulumiType = 'aws-k8s:index:IrsaRole';
//# sourceMappingURL=irsaRole.js.map