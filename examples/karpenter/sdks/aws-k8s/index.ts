// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BuildkitBuilderArgs } from "./buildkitBuilder";
export type BuildkitBuilder = import("./buildkitBuilder").BuildkitBuilder;
export const BuildkitBuilder: typeof import("./buildkitBuilder").BuildkitBuilder = null as any;
utilities.lazyLoad(exports, ["BuildkitBuilder"], () => require("./buildkitBuilder"));

export { BuildkitCertsArgs } from "./buildkitCerts";
export type BuildkitCerts = import("./buildkitCerts").BuildkitCerts;
export const BuildkitCerts: typeof import("./buildkitCerts").BuildkitCerts = null as any;
utilities.lazyLoad(exports, ["BuildkitCerts"], () => require("./buildkitCerts"));

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { IrsaRoleArgs } from "./irsaRole";
export type IrsaRole = import("./irsaRole").IrsaRole;
export const IrsaRole: typeof import("./irsaRole").IrsaRole = null as any;
utilities.lazyLoad(exports, ["IrsaRole"], () => require("./irsaRole"));

export { KarpenterArgs } from "./karpenter";
export type Karpenter = import("./karpenter").Karpenter;
export const Karpenter: typeof import("./karpenter").Karpenter = null as any;
utilities.lazyLoad(exports, ["Karpenter"], () => require("./karpenter"));

export { KubeConfigArgs } from "./kubeConfig";
export type KubeConfig = import("./kubeConfig").KubeConfig;
export const KubeConfig: typeof import("./kubeConfig").KubeConfig = null as any;
utilities.lazyLoad(exports, ["KubeConfig"], () => require("./kubeConfig"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-k8s:index:BuildkitBuilder":
                return new BuildkitBuilder(name, <any>undefined, { urn })
            case "aws-k8s:index:BuildkitCerts":
                return new BuildkitCerts(name, <any>undefined, { urn })
            case "aws-k8s:index:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws-k8s:index:IrsaRole":
                return new IrsaRole(name, <any>undefined, { urn })
            case "aws-k8s:index:Karpenter":
                return new Karpenter(name, <any>undefined, { urn })
            case "aws-k8s:index:KubeConfig":
                return new KubeConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-k8s", "index", _module)
pulumi.runtime.registerResourcePackage("aws-k8s", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aws-k8s") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
